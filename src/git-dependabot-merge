#!/usr/bin/env bash
set -eu

usage() {
  printf 'usage: git dependabot-merge [-r <remote>]
OPTIONS
  -f  Set the additional filter (example: github_actions) [default: ""]
  -r  Set the remote to check [default: origin]
  -a  rebase back onto the main branch  (if possible)

EXAMPLES
git dependabot-merge -r github
git dependabot-merge
'
}

filter=""
remote="origin"
help=false
autoRebase=false
targetBranch="dependabot-merge"

while getopts :r:f:ha flag
do
  case "${flag}" in
    f) filter=${OPTARG};;
    r) remote=${OPTARG};;
    h) help=true;;
    a) autoRebase=true;;
    *)
  esac
done

if [ "$help" = true ]; then
  usage
  exit 1
fi

default_branch=$(git remote show "${remote}" | grep 'HEAD branch' | cut -d' ' -f5)

git fetch "$remote"
git remote prune "$remote"
git branch -f "$targetBranch" "${default_branch}"

git for-each-ref --shell --format="ref=%(refname)" "refs/remotes/${remote}/dependabot/${filter}" | \
while read -r entry
do
  eval "${entry}"
  ref="${ref:?}"
  branch="${ref#refs/remotes/"${remote}"/}"
  echo "Working on ${branch}"
  git checkout "${branch}"
  git rebase "$targetBranch"
  git checkout "$targetBranch"
  git merge --ff-only "${branch}"
done

if [ "$autoRebase" = true ]; then
  git checkout "${default_branch}"
  git rebase "$targetBranch"
  git branch -d "$targetBranch"
fi
